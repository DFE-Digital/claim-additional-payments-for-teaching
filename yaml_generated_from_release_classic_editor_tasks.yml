steps:

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0

  displayName: 'Use Terraform latest'


- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0

  displayName: 'Terraform Init'

  inputs:

    command: init

    workingDirectory: '$(System.DefaultWorkingDirectory)/Build/repository/azure/terraform'

    backendType: azurerm

    backendServiceArm: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

    backendAzureRmResourceGroupName: 's118d01-tfbackend'

    backendAzureRmStorageAccountName: s118d01tfbackendsa

    backendAzureRmContainerName: s118d01conttfstate

    backendAzureRmKey: terraform.tfstate



- task: AzurePowerShell@5

  displayName: 'Disable KV network firewall rule'

  inputs:

    azureSubscription: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

    ScriptType: InlineScript

    Inline: |
     # Setting Variables
     $KeyVaultId = '/subscriptions/8655985a-2f87-44d7-a541-0be9a8c2779d/resourceGroups/s118d01-secrets/providers/Microsoft.KeyVault/vaults/s118d01-secrets-kv'
     $KeyVault = Get-AzResource -ResourceId $KeyVaultId -ErrorAction SilentlyContinue
     If ($null -eq $KeyVault) {
       Write-Output "##vso[task.logissue type=warning;]The Key Vault with Id $KeyVaultId does not exist"
       Exit 0
     }
     $KeyVault = Get-AzKeyVault -ResourceGroupName $KeyVault.ResourceGroupName -VaultName $KeyVault.Name
     Write-Output 'Updating Key Vault rules...'
     $KeyVault | Update-AzKeyVaultNetworkRuleSet -DefaultAction Allow 
     $LoopCount = 0
     Write-Output "Waiting for Access..." 
     # This will check every 5 seconds, up to a maximum of 30 seconds
     Do {
         $AccessAllowed = $KeyVault | Get-AzKeyVaultSecret -ErrorAction SilentlyContinue
         $LoopCount++
         Start-Sleep -Seconds 5
     }
     While ($null -eq $AccessAllowed -and $LoopCount -lt 6)
     

    preferredAzurePowerShellVersion: 3.1.0


- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0

  displayName: 'Terraform Plan'

  inputs:

    command: plan

    workingDirectory: '$(System.DefaultWorkingDirectory)/Build/repository/azure/terraform'

    environmentServiceName: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

    commandOptions: '-var="input_region=westeurope" -var="input_environment=Development" -var="input_container_version=$(Release.Artifacts.Build.BuildNumber)"'


- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0

  displayName: 'Terraform Apply'

  inputs:

    command: apply

    workingDirectory: '$(System.DefaultWorkingDirectory)/Build/repository/azure/terraform'

    environmentServiceName: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

    commandOptions: '-var="input_region=westeurope" -var="input_environment=Development" -var="input_container_version=$(Release.Artifacts.Build.BuildNumber)"'


- task: AzurePowerShell@5

  displayName: 'Enable KV network firewall rule'

  inputs:

    azureSubscription: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

    ScriptType: InlineScript

    Inline: |
     # Setting Variables
     $KeyVaultId = '/subscriptions/8655985a-2f87-44d7-a541-0be9a8c2779d/resourceGroups/s118d01-secrets/providers/Microsoft.KeyVault/vaults/s118d01-secrets-kv'
     $KeyVault = Get-AzResource -ResourceId $KeyVaultId -ErrorAction SilentlyContinue
     $KeyVault = Get-AzKeyVault -ResourceGroupName $KeyVault.ResourceGroupName -VaultName $KeyVault.Name
     Write-Output 'Updating Key Vault rules...'
     $KeyVault | Update-AzKeyVaultNetworkRuleSet -DefaultAction Deny 

    preferredAzurePowerShellVersion: 3.1.0


- task: AzureAppServiceManage@0

  displayName: 'Swap Slots: s118d01-app-as'

  inputs:

    azureSubscription: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

    WebAppName: 's118d01-app-as'

    ResourceGroupName: 's118d01-app'

    SourceSlot: staging

  timeoutInMinutes: 20


- task: Bash@3

  displayName: 'Send Slack Notification'

  inputs:

    targetType: filePath

    filePath: './$(System.DefaultWorkingDirectory)/Build/repository/bin/slack-alert'

    arguments: 'development $(Release.Artifacts.Build.BuildNumber) $(Release.ReleaseId) https://hooks.slack.com/services/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 SUCCESS'


- task: Bash@3

  displayName: 'Send Slack Failure Notification'

  inputs:

    targetType: filePath

    filePath: './$(System.DefaultWorkingDirectory)/Build/repository/bin/slack-alert'

    arguments: 'development $(Release.Artifacts.Build.BuildNumber) $(Release.ReleaseId) https://hooks.slack.com/services/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 FAILURE'

  condition: failed()

