#!/bin/bash
set -e

function ensure-resource-group-exists {
  if ! az group show --name "$1" > /dev/null; then
    echo "Creating new resource group: $1..."
    az group create \
      --name "$1" \
      --location "$RESOURCE_LOCATION" \
      > /dev/null
  else
    echo "Using existing resource group: $1..."
  fi
}

function filter-azure-outputs {
  echo "$1" | ruby -r json -e "
    puts JSON.parse(STDIN.read)['properties']['outputs']
             .map { |k, v| [k, { 'value' => v.fetch('value') }] }
             .select { |(k, v)| $2.include?(k) || ${3:-"{}"}.keys.include?(k) }
             .map { |(k, v)| [${3:-"{}"}.fetch(k, k), v] }
             .to_h
             .to_json
  "
}

function fetch-azure-output-value {
  echo "$1" | ruby -r json -e "
    puts JSON.parse(STDIN.read)['properties']['outputs']
             .fetch('$2')
             .fetch('value')
  "
}

if [ $# -lt 1 ]; then
  echo "Usage: $0 ENVIRONMENT_NAME"
  exit 1
fi

ENVIRONMENT_NAME=$1

case $ENVIRONMENT_NAME in
  "development")
    SUBSCRIPTION_ID="8655985a-2f87-44d7-a541-0be9a8c2779d"
    RESOURCE_GROUP_PREFIX="s118d01"
    VSP_DOCKER_IMAGE_TAG="20201102.3"
    ;;
  "test")
    SUBSCRIPTION_ID="e9299169-9666-4f15-9da9-5332680145af"
    RESOURCE_GROUP_PREFIX="s118t01"
    VSP_DOCKER_IMAGE_TAG="20201102.3"
    ;;
  "production")
    SUBSCRIPTION_ID="88bd392f-df19-458b-a100-22b4429060ed"
    RESOURCE_GROUP_PREFIX="s118p01"
    VSP_DOCKER_IMAGE_TAG="20201102.3"
    ;;
  *)
    echo "Could not find a known environment with the name: $ENVIRONMENT_NAME"
    exit 1
    ;;
esac

PROJECT_CORE_RESOURCE_GROUP_NAME="$RESOURCE_GROUP_PREFIX-ProjectCore"
PROJECT_CORE_DEPLOYMENT_NAME=$PROJECT_CORE_RESOURCE_GROUP_NAME

SECRETS_RESOURCE_GROUP_NAME="$RESOURCE_GROUP_PREFIX-secrets"
SECRETS_DEPLOYMENT_NAME=$SECRETS_RESOURCE_GROUP_NAME

APP_RESOURCE_GROUP_NAME="$RESOURCE_GROUP_PREFIX-app"
APP_DEPLOYMENT_NAME=$APP_RESOURCE_GROUP_NAME

ALERTS_RESOURCE_GROUP_NAME="$RESOURCE_GROUP_PREFIX-alerts"
ALERTS_DEPLOYMENT_NAME=$ALERTS_RESOURCE_GROUP_NAME

LOGIN_TO_AZURE=1
CONFIRM_BEFORE_DEPLOY=1
DEPLOY_ALERTS=1
RECOVER_KEY_VAULT=
EXTRA_APP_DEPLOYMENT_OPTIONS=()

while [ "$2" ]; do
  case $2 in
    "--skip-login")
      LOGIN_TO_AZURE=
      ;;
    "--skip-confirmation")
      CONFIRM_BEFORE_DEPLOY=
      ;;
    "--skip-alerts")
      DEPLOY_ALERTS=
      ;;
    "--recover-keyvault")
      RECOVER_KEY_VAULT=1
      ;;
    --docker-tag=*)
      DOCKER_TAG="${2#*=}"
      ;;
    *)
      echo "Unexpected argument: $2"
      exit 1
      ;;
  esac

  shift
done

if [ -z "$DOCKER_TAG" ]; then
  DOCKER_TAG="latest"
fi

GIT_COMMIT_HASH=${GIT_COMMIT_HASH:-$(git rev-parse --verify HEAD)}
SCRIPT_PATH=$(cd "$(dirname "$0")" ; pwd -P)

RESOURCE_LOCATION="West Europe"

PROJECT_CORE_TEMPLATE_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/ProjectCore/template.json"
PROJECT_CORE_PARAMETERS_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/ProjectCore/parameters/$ENVIRONMENT_NAME.json"

SECRETS_TEMPLATE_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/secrets/template.json"
SECRETS_PARAMETERS_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/secrets/parameters/$ENVIRONMENT_NAME.json"

APP_TEMPLATE_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/app/template.json"
APP_PARAMETERS_TEMPLATE_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/app/parameters/$ENVIRONMENT_NAME.template.json"
APP_PARAMETERS_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/app/parameters/$ENVIRONMENT_NAME.json"

ALERTS_TEMPLATE_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/alerts/template.json"
ALERTS_PARAMETERS_TEMPLATE_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/alerts/parameters/$ENVIRONMENT_NAME.template.json"
ALERTS_PARAMETERS_FILE_PATH="$SCRIPT_PATH/../azure/resource_groups/alerts/parameters/$ENVIRONMENT_NAME.json"

if [ "$LOGIN_TO_AZURE" ] && ! az account show > /dev/null; then
  echo "Logging in..."
  az login
fi

echo "Setting default subscription to $SUBSCRIPTION_ID..."
az account set --subscription "$SUBSCRIPTION_ID"

if ! az group show --name "$PROJECT_CORE_RESOURCE_GROUP_NAME" > /dev/null; then
  echo "$PROJECT_CORE_RESOURCE_GROUP_NAME does not exist"
  exit 1
fi

echo "Starting ProjectCore deployment..."

PROJECT_CORE_DEPLOYMENT_RESULT=$(
  az deployment group create \
    --name "$PROJECT_CORE_DEPLOYMENT_NAME" \
    --resource-group "$PROJECT_CORE_RESOURCE_GROUP_NAME" \
    --template-file "$PROJECT_CORE_TEMPLATE_FILE_PATH" \
    --parameters "@$PROJECT_CORE_PARAMETERS_FILE_PATH" \
    --mode Complete \
    --verbose \
    <&- || true
)

if ! [ "$PROJECT_CORE_DEPLOYMENT_RESULT" ]; then
  echo "Deployment failed!"
  echo "There may be some parameters missing from $PROJECT_CORE_PARAMETERS_FILE_PATH or something else might have gone wrong."
  exit 1
fi

echo "$PROJECT_CORE_DEPLOYMENT_RESULT"

echo
echo "$PROJECT_CORE_RESOURCE_GROUP_NAME deployed!"
echo

ensure-resource-group-exists $SECRETS_RESOURCE_GROUP_NAME

if [ "$CONFIRM_BEFORE_DEPLOY" ]; then
  echo
  echo "Are you ready to deploy $SECRETS_RESOURCE_GROUP_NAME?"
  echo "  Hit return to continue, or CTRL+C to stop."
  read -r
fi

if [ "$RECOVER_KEY_VAULT" ]; then
  KEYVAULT_CREATE_MODE="recover"
else
  KEYVAULT_CREATE_MODE="default"
fi

echo "Starting secrets deployment with KeyVault createMode: $KEYVAULT_CREATE_MODE..."

SECRETS_DEPLOYMENT_RESULT=$(
  az deployment group create \
    --name "$SECRETS_DEPLOYMENT_NAME" \
    --resource-group "$SECRETS_RESOURCE_GROUP_NAME" \
    --template-file "$SECRETS_TEMPLATE_FILE_PATH" \
    --parameters "@$SECRETS_PARAMETERS_FILE_PATH" \
    --parameters "$(
      filter-azure-outputs \
        "$PROJECT_CORE_DEPLOYMENT_RESULT" \
        "['defaultSubnetId']"
      )" \
    --parameters "keyVaultCreateMode=$KEYVAULT_CREATE_MODE" \
    --mode Complete \
    --verbose \
    <&- || true
)

if ! [ "$SECRETS_DEPLOYMENT_RESULT" ]; then
  echo "Deployment failed!"
  echo "There may be some parameters missing from $SECRETS_PARAMETERS_FILE_PATH or something else might have gone wrong."
  exit 1
fi

echo "$SECRETS_DEPLOYMENT_RESULT"

echo
echo "$SECRETS_RESOURCE_GROUP_NAME deployed!"
echo

KEY_VAULT_ID=$(fetch-azure-output-value "$SECRETS_DEPLOYMENT_RESULT" keyVaultId)

# KEY_VAULT_NAME=$((get-azkeyvault -vaultname 's118d01-secrets-kv').vaultname)

echo 
echo "$KEY_VAULT_NAME has been deployed - Logging"
echo

ensure-resource-group-exists $APP_RESOURCE_GROUP_NAME

echo "Rewriting app parameters file for $ENVIRONMENT_NAME..."
sed \
    -e "s|\${keyVaultId}|$KEY_VAULT_ID|g" \
    -e "s|\${vspDockerImageTag}|$VSP_DOCKER_IMAGE_TAG|g" \
    -e "s|\${appServiceDockerImageTag}|$DOCKER_TAG|g" \
    "$APP_PARAMETERS_TEMPLATE_FILE_PATH" > "$APP_PARAMETERS_FILE_PATH"

if [ "$CONFIRM_BEFORE_DEPLOY" ]; then
  echo
  echo "Are all the secrets up to date?"
  echo "Are you ready to deploy $APP_RESOURCE_GROUP_NAME?"
  echo "  Hit return to continue, or CTRL+C to stop."
  read -r
fi

echo "Starting app deployment..."

APP_DEPLOYMENT_RESULT=$(
  az deployment group create \
    --name "$APP_DEPLOYMENT_NAME" \
    --resource-group "$APP_RESOURCE_GROUP_NAME" \
    --template-file "$APP_TEMPLATE_FILE_PATH" \
    --parameters "@$APP_PARAMETERS_FILE_PATH" \
    --parameters "gitCommitHash=$GIT_COMMIT_HASH" \
    --parameters "secretsResourceGroupName=$SECRETS_RESOURCE_GROUP_NAME" \
    --parameters "$(
      filter-azure-outputs \
        "$SECRETS_DEPLOYMENT_RESULT" \
        "['keyVaultName']"
    )" \
    --parameters "$(
      filter-azure-outputs \
        "$PROJECT_CORE_DEPLOYMENT_RESULT" \
        "['workerSubnetId', 'containerNetworkProfileId', 'defaultSubnetId']"
    )" \
    "${EXTRA_APP_DEPLOYMENT_OPTIONS[@]}" \
    --mode Complete \
    --verbose \
    <&- || true
)

if ! [ "$APP_DEPLOYMENT_RESULT" ]; then
  echo "Deployment failed!"
  echo "There may be some parameters missing from $APP_PARAMETERS_FILE_PATH or something else might have gone wrong."
  exit 1
fi

echo "$APP_DEPLOYMENT_RESULT"

echo
echo "$APP_RESOURCE_GROUP_NAME deployed!"
echo

if [ "$DEPLOY_ALERTS" ]; then
  ensure-resource-group-exists $ALERTS_RESOURCE_GROUP_NAME

  echo "Rewriting alerts parameters file for $ENVIRONMENT_NAME..."
  sed \
    -e "s|\${appResourceGroupId}|$APP_RESOURCE_GROUP_NAME|g" \
    -e "s|\${keyVaultId}|$KEY_VAULT_ID|g" \
    "$ALERTS_PARAMETERS_TEMPLATE_FILE_PATH" > "$ALERTS_PARAMETERS_FILE_PATH"

  echo "Starting alerts deployment..."

  ALERTS_DEPLOYMENT_RESULT=$(
    az deployment group create \
      --name "$ALERTS_DEPLOYMENT_NAME" \
      --resource-group "$ALERTS_RESOURCE_GROUP_NAME" \
      --template-file "$ALERTS_TEMPLATE_FILE_PATH" \
      --parameters "@$ALERTS_PARAMETERS_FILE_PATH" \
      --parameters "gitCommitHash=$GIT_COMMIT_HASH" \
      --parameters "$(
        filter-azure-outputs \
          "$PROJECT_CORE_DEPLOYMENT_RESULT" \
          "[]" \
          "{'resourceGroupId' => 'projectCoreResourceGroupId'}"
      )" \
      --parameters "$(
        filter-azure-outputs \
          "$SECRETS_DEPLOYMENT_RESULT" \
          "[]" \
          "{'resourceGroupId' => 'secretsResourceGroupId'}"
      )" \
      --parameters "$(
        filter-azure-outputs \
          "$APP_DEPLOYMENT_RESULT" \
          "['appServiceId', 'appServicePlanId', 'workerContainerInstanceId', 'databaseServerId', 'vspAppServiceId', 'vspAppServicePlanId']" \
          "{'resourceGroupId' => 'appResourceGroupId'}"
      )" \
      --mode Complete \
      --verbose \
      <&- || true
  )

  if ! [ "$ALERTS_DEPLOYMENT_RESULT" ]; then
    echo "Deployment failed!"
    echo "There may be some parameters missing from $ALERTS_PARAMETERS_FILE_PATH or something else might have gone wrong."
    exit 1
  fi

  echo "$ALERTS_DEPLOYMENT_RESULT"

  echo
  echo "$ALERTS_RESOURCE_GROUP_NAME deployed!"
  echo
fi

echo "All done. Deployment complete!"
